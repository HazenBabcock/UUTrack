import pyqtgraph as pg

from pyqtgraph import GraphicsLayoutWidget
from pyqtgraph.Qt import QtGui, QtCore


class cameraMainWidget(QtGui.QWidget):
    """Widget for holding the images generated by the camera.
    """
    def __init__(self,parent=None):
        QtGui.QWidget.__init__(self, parent)
        # General layout of the widget to hold an image and a histogram
        self.layout = QtGui.QHBoxLayout(self)

        # Settings for the image
        self.viewport = GraphicsLayoutWidget()
        self.view = self.viewport.addViewBox(colspan=3, rowspan=3, lockAspect = True, enableMenu=True)

        self.img = pg.ImageItem()
        self.img2 = pg.ImageItem() # To overlay another image if needed.
        self.img2.setOpacity(0.5)
        self.img2.setZValue(10)
        self.hline1 = pg.InfiniteLine(angle=0, movable=True, hoverPen={'color': "FF0", 'width': 4})
        self.hline2 = pg.InfiniteLine(angle=0, movable=True, hoverPen={'color': "FF0", 'width': 4})
        self.vline1 = pg.InfiniteLine(angle=90, movable=True, hoverPen={'color': "FF0", 'width': 4})
        self.vline2 = pg.InfiniteLine(angle=90, movable=True, hoverPen={'color': "FF0", 'width': 4})
        self.crosshair = []
        self.crosshair.append(pg.InfiniteLine(angle=0, movable=False, pen={'color': 124, 'width': 4}))
        self.crosshair.append(pg.InfiniteLine(angle=90, movable=False, pen={'color': 124, 'width': 4}))
        self.showCrosshair = False

        self.view.addItem(self.img)
        self.view.addItem(self.img2)
        self.view.addItem(self.hline1)
        self.view.addItem(self.hline2)
        self.view.addItem(self.vline1)
        self.view.addItem(self.vline2)

        # Settings for the histogram
        # self.vp = GraphicsLayoutWidget()
        # self.h = self.viewport.addViewBox(enableMenu=False, colspan=3)
        # self.hist = pg.HistogramLUTItem(image=self.img,fillHistogram=False)
        # self.hist.setImageItem(self.img)
        # self.h.addItem(self.hist)

        self.imv = pg.ImageView(view=self.view,imageItem=self.img)
        self.imv.setMouseTracking(True)
        self.imv.getImageItem().scene().sigMouseMoved.connect(self.mouseMoved)

        # Add everything to the widget
        self.layout.addWidget(self.imv)
        self.setLayout(self.layout)

    def keyPressEvent(self,key):
        """Triggered when there is a key press with some modifier.
        Shift+C: Removes the cross hair from the screen
        Ctrl+C: Emits a specialTask signal
        Ctrl+V: Emits a stopSpecialTask signal
        These last two events have to be handeled in the mainWindow that implemented this widget."""
        modifiers = QtGui.QApplication.keyboardModifiers()
        if modifiers == QtCore.Qt.ShiftModifier:
            if key.key() == 67: # For letter C of 'Clear
                if self.showCrosshair:
                    for c in self.crosshair:
                        self.view.removeItem(c)
                    self.showCrosshair = False
        elif modifiers == QtCore.Qt.ControlModifier:
            if key.key() == 67:
                self.emit(QtCore.SIGNAL('specialTask'))
            if key.key() == 86: # For letter V
                self.emit(QtCore.SIGNAL('stopSpecialTask'))

    def mouseMoved(self,arg):
        """Updates the position of the cross hair. The mouse has to be moved while pressing down the Ctrl button."""
        # arg = evt.pos()
        modifiers = QtGui.QApplication.keyboardModifiers()
        if modifiers == QtCore.Qt.ControlModifier:
            if not self.showCrosshair:
                for c in self.crosshair:
                    self.view.addItem(c)
                self.showCrosshair = True
            print("Image position:", self.img.mapFromScene(arg))
            self.crosshair[1].setValue(int(self.img.mapFromScene(arg).x()))
            self.crosshair[0].setValue(int(self.img.mapFromScene(arg).y()))

    # def updateImage(self,img):
    #     """Updates the image being displayed.
    #     img -- numpy 2D array"""
    #     self.img.setImage(img)
    #     self.hist.setI