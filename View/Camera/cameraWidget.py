import pyqtgraph as pg

from pyqtgraph import GraphicsLayoutWidget
from pyqtgraph.Qt import QtGui, QtCore


class cameraWidget(QtGui.QWidget):
    """Widget for holding the images generated by the camera.
    """
    def __init__(self,parent=None):
        QtGui.QWidget.__init__(self, parent)

        self.layout = QtGui.QVBoxLayout(self)

        self.viewport = GraphicsLayoutWidget()
        self.view = self.viewport.addViewBox(enableMenu=True)
        self.img = pg.ImageItem()
        self.img2 = pg.ImageItem() # To overlay another image if needed.
        self.img2.setOpacity(0.5)
        self.img2.setZValue(10)
        self.hline1 = pg.InfiniteLine(angle=0, movable=True, hoverPen={'color': "FF0", 'width': 4})
        self.hline2 = pg.InfiniteLine(angle=0, movable=True, hoverPen={'color': "FF0", 'width': 4})
        self.vline1 = pg.InfiniteLine(angle=90, movable=True, hoverPen={'color': "FF0", 'width': 4})
        self.vline2 = pg.InfiniteLine(angle=90, movable=True, hoverPen={'color': "FF0", 'width': 4})
        self.crosshair = []
        self.crosshair.append(pg.InfiniteLine(angle=0, movable=False, pen={'color': 124, 'width': 4}))
        self.crosshair.append(pg.InfiniteLine(angle=90, movable=False, pen={'color': 124, 'width': 4}))
        self.showCrosshair = False
        self.viewport.scene().sigMouseMoved.connect(self.mouseMoved)

        self.view.addItem(self.img)
        self.view.addItem(self.img2)
        self.view.addItem(self.hline1)
        self.view.addItem(self.hline2)
        self.view.addItem(self.vline1)
        self.view.addItem(self.vline2)


        self.statusBars = QtGui.QHBoxLayout()

        self.memory = QtGui.QProgressBar(self)
        # self.memory.setGeometry(200, 80, 250, 20)

        self.processor = QtGui.QProgressBar(self)
        # self.processor.setGeometry(200,80,250,20)
        self.statusBars.addWidget(self.memory)
        self.statusBars.addWidget(self.processor)

        self.message = QtGui.QTextEdit()
        self.message.setHtml('<b>information</b>')

        self.log = QtGui.QTextEdit()
        self.log.setHtml('<h1>Program Log</h1>')
        # self.message.setGeometry(0, 0, 10, 10)

        self.layout.addWidget(self.viewport)
        self.layout.addLayout(self.statusBars)
        self.layout.addWidget(self.message)
        self.layout.addWidget(self.log)
        self.setLayout(self.layout)

        self.RED_STYLE = """
        QProgressBar{
            border: 2px solid grey;
            border-radius: 5px;
            text-align: center
        }

        QProgressBar::chunk {
            background-color: red;
            width: 10px;
            margin: 1px;
        }
        """

        self.DEFAULT_STYLE = """
        QProgressBar{
            border: 2px solid grey;
            border-radius: 5px;
            text-align: center
        }

        QProgressBar::chunk {
            background-color: green;
            width: 10px;
            margin: 1px;
        }
        """

        self.YELLOW_STYLE = """
        QProgressBar{
            border: 2px solid grey;
            border-radius: 5px;
            text-align: center
        }

        QProgressBar::chunk {
            background-color: yellow;
            width: 10px;
            margin: 1px;
        }
        """

    def keyPressEvent(self,key):
        """Triggered when there is a key press with some modifier.
        Shift+C: Removes the cross hair from the screen
        Ctrl+C: Emits a specialTask signal
        Ctrl+V: Emits a stopSpecialTask signal
        These last two events have to be handeled in the mainWindow that implemented this widget."""
        modifiers = QtGui.QApplication.keyboardModifiers()
        if modifiers == QtCore.Qt.ShiftModifier:
            if key.key() == 67: # For letter C of 'Clear
                if self.showCrosshair:
                    for c in self.crosshair:
                        self.view.removeItem(c)
                    self.showCrosshair = False
        elif modifiers == QtCore.Qt.ControlModifier:
            if key.key() == 67:
                self.emit(QtCore.SIGNAL('specialTask'))
            if key.key() == 86: # For letter V
                self.emit(QtCore.SIGNAL('stopSpecialTask'))

    def mouseMoved(self,arg):
        """Updates the position of the cross hair. The mouse has to be moved while pressing down the Ctrl button."""
        modifiers = QtGui.QApplication.keyboardModifiers()
        if modifiers == QtCore.Qt.ControlModifier:
            if not self.showCrosshair:
                for c in self.crosshair:
                    self.view.addItem(c)
                self.showCrosshair = True
            self.crosshair[1].setValue(int(self.img.mapFromScene(arg).x()))
            self.crosshair[0].setValue(int(self.img.mapFromScene(arg).y()))